In [[mathematical logic]] and [[theoretical computer science]], an '''abstract rewriting system''' (also '''(abstract) reduction system''' or '''abstract rewrite system'''; abbreviated '''ARS''') is a [[Formalism (mathematics)|formalism]] that captures the quintessential notion and properties of [[rewriting]] systems. In its simplest form, an ARS is simply a [[set (mathematics)|set]] (of "objects") together with a [[binary relation]], traditionally denoted with <math>\rightarrow</math>; this definition can be further refined if we index (label) subsets of the binary relation. Despite its simplicity, an ARS is sufficient to describe important properties of rewriting systems like [[Normal form (abstract rewriting)|normal form]]s, [[Termination (term rewriting)|termination]], and various notions of [[Confluence (abstract rewriting)|confluence]].

Historically, there have been several formalizations of rewriting in an abstract setting, each with its idiosyncrasies. This is due in part to the fact that some notions are equivalent, see below in this article. The formalization that is most commonly encountered in monographs and textbooks, and which is generally followed here, is due to [[Gérard Huet]] (1980).<ref>Book and Otto, p. 9</ref>

== Definition ==

An '''abstract reduction system''' ('''ARS''') is the most general (unidimensional) notion about specifying a set of objects and rules that can be applied to transform them. More recently, authors use the term '''abstract rewriting system''' as well.<ref name = terese7>Terese, p. 7,</ref> (The preference for the word "reduction" here instead of "rewriting" constitutes a departure from the uniform use of "rewriting" in the names of systems that are particularizations of ARS. Because the word "reduction" does not appear in the names of more specialized systems, in older texts '''reduction system''' is a synonym for ARS).<ref name="Book and Otto, p. 10">Book and Otto, p. 10</ref>

An ARS is a [[set (mathematics)|set]] ''A'', whose elements are usually called objects, together with a [[binary relation]] on ''A'', traditionally denoted by →, and called the '''reduction relation''', '''rewrite relation'''<ref name = terese7/> or just '''reduction'''.<ref name="Book and Otto, p. 10"/> This (entrenched) terminology using "reduction" is a little misleading, because the relation is not necessarily reducing some measure of the objects.
<!--- deleted, since string rewriting systems aren't discussed futher here: 
this will become more apparent when discussing string rewriting systems further in this article. --->

In some contexts it may be beneficial to distinguish between some subsets of the rules, i.e. some subsets of the reduction relation →, e.g. the entire reduction relation may consist of [[associativity]] and [[commutativity]] rules. Consequently, some authors define the reduction relation → as the indexed union of some relations; for instance if <math>{\rightarrow_1 \cup \rightarrow_2} = {\rightarrow}</math>, the notation used is (A, →<sub>1</sub>, →<sub>2</sub>).

As a mathematical object, an ARS is exactly the same as an unlabeled [[state transition system]], and if the relation is considered as an indexed union, then an ARS is the same as a labeled state transition system with the indices being the labels. The focus of the study, and the terminology are different however. In a  [[state transition system]] one is interested in interpreting the labels as actions, whereas in an ARS the focus is on how objects may be transformed (rewritten) into others.<ref>Terese, p. 7-8</ref>

== Example 1==

Suppose the set of objects is ''T'' = {''a'', ''b'', ''c''} and the binary relation is given by the rules ''a'' → ''b'', ''b'' → ''a'', ''a'' → ''c'', and ''b'' → ''c''. Observe that these rules can be applied to both ''a'' and ''b'' to get ''c''. Furthermore,  nothing can be applied to ''c'' to transform it any further. Such a property is clearly an important one.

== Basic notions ==

Example 1 leads us to define some important notions in the general setting of an ARS. First we need some basic notions and notations.<ref>Baader and Nipkow, pp.&nbsp;8-9</ref>

* <math>\stackrel{*}{\rightarrow}</math> is the [[transitive closure]] of <math>(\rightarrow) \cup (=)</math>, where = is the [[identity relation]], i.e. <math>\stackrel{*}{\rightarrow}</math> is the smallest [[preorder]] ([[reflexive relation|reflexive]] and [[transitive relation|transitive]] relation) containing <math>\rightarrow</math>. Alternatively, <math>\stackrel{*}{\rightarrow}</math> is the [[reflexive transitive closure]] of <math>\rightarrow</math>.
* <math>\leftrightarrow</math> is <math>(\rightarrow) \cup {(\rightarrow)^{-1}}</math>, that is, the union of the relation → with its [[inverse relation]], also known as the [[symmetric closure]] of <math>\rightarrow</math>.
* <math>\stackrel{*}{\leftrightarrow}</math> is the [[transitive closure]] of <math>(\leftrightarrow) \cup (=)</math>, that is <math>\stackrel{*}{\leftrightarrow}</math> is the smallest [[equivalence relation]] containing <math>\rightarrow</math>. Equivalently, <math>\stackrel{*}{\leftrightarrow}</math> is the [[reflexive transitive symmetric closure]] of <math>\rightarrow</math>.

== Normal forms and the word problem ==
[[File:Solving the word problem without and with completion_svg.svg|thumb|Solving the word problem: deciding if <math>x \stackrel{*}{\leftrightarrow} y</math> usually requires heuristic search ({{color|#c00000|red}}, {{color|#00c000|green}}), while deciding <math>x\downarrow = y\downarrow</math> is straightforward ({{color|#808080|grey}}). For term rewriting systems the [[Knuth-Bendix completion algorithm]] enlarges <math>\rightarrow</math> to establish unique normal forms, if possible.]]
{{main|Normal form (abstract rewriting)}}
An object ''x'' in ''A'' is called '''reducible''' if there exist some other ''y'' in ''A'' and <math>x \rightarrow y</math>; otherwise it is called '''irreducible''' or a '''normal form'''. An object ''y'' is called a normal form of ''x'' if <math>x \stackrel{*}{\rightarrow} y</math> and ''y'' is irreducible. If ''x'' has a ''unique'' normal form, then this is usually denoted with <math>x\downarrow</math>. In example 1 above, ''c'' is a normal form, and <math>c = a\downarrow = b\downarrow</math>. If every object has at least one normal form, the ARS is called '''normalizing'''.

One of the important problems that may be formulated in an ARS is the '''word problem''': given ''x'' and ''y'' are they equivalent under <math>\stackrel{*}{\leftrightarrow}</math>? This is a very general setting for formulating the [[Word problem (mathematics)|word problem for the presentation of an algebraic structure]]. For instance, the [[word problem for groups]] is a particular case of an ARS word problem. Central to an "easy" solution for the word problem is the existence of unique normal forms: in this case two objects are equivalent under <math>\stackrel{*}{\leftrightarrow}</math> if and only if they have the same normal form. The word problem for an ARS is [[undecidable problem|undecidable]] in general.

== Joinability and the Church&ndash;Rosser property ==

A related, but weaker notion than the existence of normal forms is that of two objects being '''joinable''': ''x'' and ''y'' are said to be joinable if there exists some ''z'' with the property that <math>x \stackrel{*}{\rightarrow} z \stackrel{*}{\leftarrow} y</math>. From this definition, it's apparent one may define the joinability relation as <math>\stackrel{*}{\rightarrow} \circ \stackrel{*}{\leftarrow}</math>, where <math>\circ</math> is the [[composition of relations]]. Joinability is usually denoted, somewhat confusingly, also with <math>\downarrow</math>, but in this notation the down arrow is a binary relation, i.e. we write <math>x\mathbin\downarrow y</math> if ''x'' and ''y'' are joinable.

An ARS is said to possess the '''Church-Rosser property''' if and only if <math>x \stackrel{*}{\leftrightarrow} y</math> implies <math>x\mathbin\downarrow y</math> for all objects ''x'', ''y''. Equivalently, the Church-Rosser property means that the reflexive transitive symmetric closure is contained in the joinability relation. [[Alonzo Church]] and [[J. Barkley Rosser]] proved in 1936 that [[lambda calculus]] has this property;<ref>Alonzo Church and J. Barkley Rosser. Some properties of conversion. Trans.
AMS, 39:472-482, 1936</ref> hence the name of the property.<ref>Baader and Nipkow, p. 9</ref> (The fact that lambda calculus has this property is also known as the [[Church-Rosser theorem]].) In an ARS with the Church-Rosser property the word problem may be reduced to the search for a common successor. In a Church-Rosser system, an object has ''at most one'' normal form; that is the normal form of an object is unique if it exists, but it may well not exist. In lambda calculus for instance, the expression (λx.xx)(λx.xx) does not have a normal form because there exists an infinite sequence of [[beta reduction]]s (λx.xx)(λx.xx) → (λx.xx)(λx.xx) → ...<ref>S.B. Cooper, ''Computability theory'', p. 184</ref>

== Notions of confluence ==
{{see also|Confluence (abstract rewriting)}}
Various properties, simpler than Church-Rosser, are equivalent to it. The existence of these equivalent properties allows one to prove that a system is Church-Rosser with less work. Furthermore, the notions of confluence can be defined as properties of a particular object, something that's not possible for Church-Rosser. An ARS <math>(A,\rightarrow)</math> is said to be,

* '''confluent''' if and only if for all ''w'', ''x'', and ''y'' in ''A'',  <math>x \stackrel{*}{\leftarrow} w \stackrel{*}{\rightarrow} y</math> implies <math>x\mathbin\downarrow y</math>. Roughly speaking, confluence says that no matter how two paths diverge from a common ancestor (''w''), the paths are joining at ''some'' common successor. This notion may be refined as property of a particular object ''w'', and the system called confluent if all its elements are confluent.
* '''semi-confluent''' if and only if for all ''w'', ''x'', and ''y'' in ''A'',  <math>x \leftarrow w \stackrel{*}{\rightarrow} y</math> implies <math>x\mathbin\downarrow y</math>. This differs from confluence by the single step reduction from ''w'' to ''x''.
* '''locally confluent''' if and only if for all ''w'', ''x'', and ''y'' in ''A'',  <math>x \leftarrow w \rightarrow y</math> implies <math>x\mathbin\downarrow y</math>. This property is sometimes called '''weak confluence'''.

[[File:Cyclic_locally,_but_not_globally_confluent_rewrite_system.png|thumb|Example of a locally-confluent rewrite system not having the Church-Rosser property]]
'''Theorem.''' For an ARS the following three conditions are equivalent: (i) it has the Church-Rosser property, (ii) it is confluent, (iii) it is semi-confluent.<ref>Baader and Nipkow, p. 11</ref>

'''Corollary'''.<ref>Baader and Nipkow, p. 12</ref> In a confluent ARS if <math>x \stackrel{*}{\leftrightarrow} y</math> then
* If both ''x'' and ''y'' are normal forms, then ''x'' = ''y''.
* If ''y'' is a normal form, then <math>x \stackrel{*}{\rightarrow} y</math>

Because of these equivalences, a fair bit of variation in definitions is encountered in the literature. For instance, in Terese the Church-Rosser property and confluence are defined to be synonymous and identical to the definition of confluence presented here; Church-Rosser as defined here remains unnamed, but is given as an equivalent property; this departure from other texts is deliberate.<ref>Terese p.11</ref> Because of the above corollary, one may define a normal form ''y'' of ''x'' as an irreducible ''y'' with the property that <math>x \stackrel{*}{\leftrightarrow} y</math>. This definition, found in Book and Otto, is equivalent to the common one given here in a confluent system, but it is more inclusive in a non-confluent ARS.

Local confluence on the other hand is not equivalent with the other notions of confluence given in this section, but it is strictly weaker than confluence. The typical counterexample is <math>\{b\rightarrow c, c\rightarrow b, b\rightarrow a, c\rightarrow d\}</math>, which is locally confluent but not confluent (cf. picture).

== Termination and convergence ==
An abstract rewriting system is said to be '''terminating''' or '''noetherian''' if there is no infinite chain <math>x_0 \rightarrow x_1 \rightarrow x_2 \rightarrow \cdots</math>. (This is just saying that the rewriting relation is a [[Noetherian relation]].) In a terminating ARS, every object has at least one normal form, thus it is normalizing. The converse is not true. In example 1 for instance, there is an infinite rewriting chain, namely <math>a \rightarrow b \rightarrow a \rightarrow b \rightarrow \cdots</math>, even though the system is normalizing. A confluent and terminating ARS is called '''canonical''',<ref>{{cite book| author=David A. Duffy| title=Principles of Automated Theorem Proving| year=1991| publisher=Wiley}} Here: sect.7.2.1, p.153</ref> or '''convergent'''. In a convergent ARS, every object has a unique normal form. But it is sufficient for the system to be confluent and normalizing for a unique normal to exist for every element, as seen in example 1.

'''Theorem''' ([[Newman's Lemma]]): A terminating ARS is confluent if and only if it is locally confluent.

The original 1942 proof of this result by Newman was rather complicated. It wasn't until 1980 that Huet published a much simpler proof exploiting the fact that when <math>\rightarrow</math> is terminating we can apply [[well-founded induction]].<ref>Harrison, p. 260</ref>

== Notes ==
{{reflist|3}}

== Further reading ==
* {{cite book|first1=Franz|last1=Baader|authorlink1=Franz Baader|first2=Tobias|last2=Nipkow|authorlink2=Tobias Nipkow|title=Term Rewriting and All That|year=1998|publisher=Cambridge University Press|ref=harv|url=https://books.google.com/books?id=N7BvXVUCQk8C&printsec=frontcover#v=onepage&q&f=false|isbn=9780521779203}} A textbook suitable for undergraduates.
* [[Nachum Dershowitz]] and [[Jean-Pierre Jouannaud]] [http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.64.3114 ''Rewrite Systems''], Chapter 6 in [[Jan van Leeuwen]] (Ed.), ''Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics.'', Elsevier and MIT Press, 1990, {{ISBN|0-444-88074-7}}, pp.&nbsp;243&ndash;320. The [[preprint]] of this chapter is freely available from the authors, but it misses the figures.
* [[Ronald V. Book]] and Friedrich Otto, ''String-rewriting Systems'', Springer (1993). Chapter 1, "Abstract reduction systems"
* [[Marc Bezem]], [[Jan Willem Klop]], [[Roel de Vrijer]] ("Terese"), ''Term rewriting systems'', Cambridge University Press, 2003, {{ISBN|0-521-39115-6}}, Chapter 1. This is a comprehensive monograph. It uses, however, a fair deal of notations and definitions not commonly encountered elsewhere. For instance the Church&ndash;Rosser property is defined to be identical with confluence.
* [[John Harrison]], ''Handbook of Practical Logic and Automated Reasoning'', Cambridge University Press, 2009, {{ISBN|978-0-521-89957-4}}, chapter 4 "Equality". Abstract rewriting from the practical perspective of solving problems in [[equational logic]].
* [[Gérard Huet]], ''Confluent Reductions: Abstract Properties and Applications to Term Rewriting Systems'', Journal of the ACM ([[JACM]]), October 1980, Volume 27, Issue 4, pp.&nbsp;797&ndash;821. Huet's paper established many of the modern concepts, results and notations.
* Sinyor, J.; [http://downloads.hindawi.com/journals/ijmms/2010/458563.pdf  "The 3x+1 Problem as a String Rewriting System"], ''International Journal of Mathematics and Mathematical Sciences'', Volume 2010 (2010), Article ID 458563, 6 pages.

[[Category:Formal languages]]
[[Category:Logic in computer science]]
[[Category:Rewriting systems]]In [[mathematical logic]] and [[theoretical computer science]], an '''abstract rewriting system''' (also '''(abstract) reduction system''' or '''abstract rewrite system'''; abbreviated '''ARS''') is a [[Formalism (mathematics)|formalism]] that captures the quintessential notion and properties of [[rewriting]] systems. In its simplest form, an ARS is simply a [[set (mathematics)|set]] (of "objects") together with a [[binary relation]], traditionally denoted with <math>\rightarrow</math>; this definition can be further refined if we index (label) subsets of the binary relation. Despite its simplicity, an ARS is sufficient to describe important properties of rewriting systems like [[Normal form (abstract rewriting)|normal form]]s, [[Termination (term rewriting)|termination]], and various notions of [[Confluence (abstract rewriting)|confluence]].

Historically, there have been several formalizations of rewriting in an abstract setting, each with its idiosyncrasies. This is due in part to the fact that some notions are equivalent, see below in this article. The formalization that is most commonly encountered in monographs and textbooks, and which is generally followed here, is due to [[Gérard Huet]] (1980).<ref>Book and Otto, p. 9</ref>

== Definition ==

An '''abstract reduction system''' ('''ARS''') is the most general (unidimensional) notion about specifying a set of objects and rules that can be applied to transform them. More recently, authors use the term '''abstract rewriting system''' as well.<ref name = terese7>Terese, p. 7,</ref> (The preference for the word "reduction" here instead of "rewriting" constitutes a departure from the uniform use of "rewriting" in the names of systems that are particularizations of ARS. Because the word "reduction" does not appear in the names of more specialized systems, in older texts '''reduction system''' is a synonym for ARS).<ref name="Book and Otto, p. 10">Book and Otto, p. 10</ref>

An ARS is a [[set (mathematics)|set]] ''A'', whose elements are usually called objects, together with a [[binary relation]] on ''A'', traditionally denoted by →, and called the '''reduction relation''', '''rewrite relation'''<ref name = terese7/> or just '''reduction'''.<ref name="Book and Otto, p. 10"/> This (entrenched) terminology using "reduction" is a little misleading, because the relation is not necessarily reducing some measure of the objects.
<!--- deleted, since string rewriting systems aren't discussed futher here: 
this will become more apparent when discussing string rewriting systems further in this article. --->

In some contexts it may be beneficial to distinguish between some subsets of the rules, i.e. some subsets of the reduction relation →, e.g. the entire reduction relation may consist of [[associativity]] and [[commutativity]] rules. Consequently, some authors define the reduction relation → as the indexed union of some relations; for instance if <math>{\rightarrow_1 \cup \rightarrow_2} = {\rightarrow}</math>, the notation used is (A, →<sub>1</sub>, →<sub>2</sub>).

As a mathematical object, an ARS is exactly the same as an unlabeled [[state transition system]], and if the relation is considered as an indexed union, then an ARS is the same as a labeled state transition system with the indices being the labels. The focus of the study, and the terminology are different however. In a  [[state transition system]] one is interested in interpreting the labels as actions, whereas in an ARS the focus is on how objects may be transformed (rewritten) into others.<ref>Terese, p. 7-8</ref>

== Example 1==

Suppose the set of objects is ''T'' = {''a'', ''b'', ''c''} and the binary relation is given by the rules ''a'' → ''b'', ''b'' → ''a'', ''a'' → ''c'', and ''b'' → ''c''. Observe that these rules can be applied to both ''a'' and ''b'' to get ''c''. Furthermore,  nothing can be applied to ''c'' to transform it any further. Such a property is clearly an important one.

== Basic notions ==

Example 1 leads us to define some important notions in the general setting of an ARS. First we need some basic notions and notations.<ref>Baader and Nipkow, pp.&nbsp;8-9</ref>

* <math>\stackrel{*}{\rightarrow}</math> is the [[transitive closure]] of <math>(\rightarrow) \cup (=)</math>, where = is the [[identity relation]], i.e. <math>\stackrel{*}{\rightarrow}</math> is the smallest [[preorder]] ([[reflexive relation|reflexive]] and [[transitive relation|transitive]] relation) containing <math>\rightarrow</math>. Alternatively, <math>\stackrel{*}{\rightarrow}</math> is the [[reflexive transitive closure]] of <math>\rightarrow</math>.
* <math>\leftrightarrow</math> is <math>(\rightarrow) \cup {(\rightarrow)^{-1}}</math>, that is, the union of the relation → with its [[inverse relation]], also known as the [[symmetric closure]] of <math>\rightarrow</math>.
* <math>\stackrel{*}{\leftrightarrow}</math> is the [[transitive closure]] of <math>(\leftrightarrow) \cup (=)</math>, that is <math>\stackrel{*}{\leftrightarrow}</math> is the smallest [[equivalence relation]] containing <math>\rightarrow</math>. Equivalently, <math>\stackrel{*}{\leftrightarrow}</math> is the [[reflexive transitive symmetric closure]] of <math>\rightarrow</math>.

== Normal forms and the word problem ==
[[File:Solving the word problem without and with completion_svg.svg|thumb|Solving the word problem: deciding if <math>x \stackrel{*}{\leftrightarrow} y</math> usually requires heuristic search ({{color|#c00000|red}}, {{color|#00c000|green}}), while deciding <math>x\downarrow = y\downarrow</math> is straightforward ({{color|#808080|grey}}). For term rewriting systems the [[Knuth-Bendix completion algorithm]] enlarges <math>\rightarrow</math> to establish unique normal forms, if possible.]]
{{main|Normal form (abstract rewriting)}}
An object ''x'' in ''A'' is called '''reducible''' if there exist some other ''y'' in ''A'' and <math>x \rightarrow y</math>; otherwise it is called '''irreducible''' or a '''normal form'''. An object ''y'' is called a normal form of ''x'' if <math>x \stackrel{*}{\rightarrow} y</math> and ''y'' is irreducible. If ''x'' has a ''unique'' normal form, then this is usually denoted with <math>x\downarrow</math>. In example 1 above, ''c'' is a normal form, and <math>c = a\downarrow = b\downarrow</math>. If every object has at least one normal form, the ARS is called '''normalizing'''.

One of the important problems that may be formulated in an ARS is the '''word problem''': given ''x'' and ''y'' are they equivalent under <math>\stackrel{*}{\leftrightarrow}</math>? This is a very general setting for formulating the [[Word problem (mathematics)|word problem for the presentation of an algebraic structure]]. For instance, the [[word problem for groups]] is a particular case of an ARS word problem. Central to an "easy" solution for the word problem is the existence of unique normal forms: in this case two objects are equivalent under <math>\stackrel{*}{\leftrightarrow}</math> if and only if they have the same normal form. The word problem for an ARS is [[undecidable problem|undecidable]] in general.

== Joinability and the Church&ndash;Rosser property ==

A related, but weaker notion than the existence of normal forms is that of two objects being '''joinable''': ''x'' and ''y'' are said to be joinable if there exists some ''z'' with the property that <math>x \stackrel{*}{\rightarrow} z \stackrel{*}{\leftarrow} y</math>. From this definition, it's apparent one may define the joinability relation as <math>\stackrel{*}{\rightarrow} \circ \stackrel{*}{\leftarrow}</math>, where <math>\circ</math> is the [[composition of relations]]. Joinability is usually denoted, somewhat confusingly, also with <math>\downarrow</math>, but in this notation the down arrow is a binary relation, i.e. we write <math>x\mathbin\downarrow y</math> if ''x'' and ''y'' are joinable.

An ARS is said to possess the '''Church-Rosser property''' if and only if <math>x \stackrel{*}{\leftrightarrow} y</math> implies <math>x\mathbin\downarrow y</math> for all objects ''x'', ''y''. Equivalently, the Church-Rosser property means that the reflexive transitive symmetric closure is contained in the joinability relation. [[Alonzo Church]] and [[J. Barkley Rosser]] proved in 1936 that [[lambda calculus]] has this property;<ref>Alonzo Church and J. Barkley Rosser. Some properties of conversion. Trans.
AMS, 39:472-482, 1936</ref> hence the name of the property.<ref>Baader and Nipkow, p. 9</ref> (The fact that lambda calculus has this property is also known as the [[Church-Rosser theorem]].) In an ARS with the Church-Rosser property the word problem may be reduced to the search for a common successor. In a Church-Rosser system, an object has ''at most one'' normal form; that is the normal form of an object is unique if it exists, but it may well not exist. In lambda calculus for instance, the expression (λx.xx)(λx.xx) does not have a normal form because there exists an infinite sequence of [[beta reduction]]s (λx.xx)(λx.xx) → (λx.xx)(λx.xx) → ...<ref>S.B. Cooper, ''Computability theory'', p. 184</ref>

== Notions of confluence ==
{{see also|Confluence (abstract rewriting)}}
Various properties, simpler than Church-Rosser, are equivalent to it. The existence of these equivalent properties allows one to prove that a system is Church-Rosser with less work. Furthermore, the notions of confluence can be defined as properties of a particular object, something that's not possible for Church-Rosser. An ARS <math>(A,\rightarrow)</math> is said to be,

* '''confluent''' if and only if for all ''w'', ''x'', and ''y'' in ''A'',  <math>x \stackrel{*}{\leftarrow} w \stackrel{*}{\rightarrow} y</math> implies <math>x\mathbin\downarrow y</math>. Roughly speaking, confluence says that no matter how two paths diverge from a common ancestor (''w''), the paths are joining at ''some'' common successor. This notion may be refined as property of a particular object ''w'', and the system called confluent if all its elements are confluent.
* '''semi-confluent''' if and only if for all ''w'', ''x'', and ''y'' in ''A'',  <math>x \leftarrow w \stackrel{*}{\rightarrow} y</math> implies <math>x\mathbin\downarrow y</math>. This differs from confluence by the single step reduction from ''w'' to ''x''.
* '''locally confluent''' if and only if for all ''w'', ''x'', and ''y'' in ''A'',  <math>x \leftarrow w \rightarrow y</math> implies <math>x\mathbin\downarrow y</math>. This property is sometimes called '''weak confluence'''.

[[File:Cyclic_locally,_but_not_globally_confluent_rewrite_system.png|thumb|Example of a locally-confluent rewrite system not having the Church-Rosser property]]
'''Theorem.''' For an ARS the following three conditions are equivalent: (i) it has the Church-Rosser property, (ii) it is confluent, (iii) it is semi-confluent.<ref>Baader and Nipkow, p. 11</ref>

'''Corollary'''.<ref>Baader and Nipkow, p. 12</ref> In a confluent ARS if <math>x \stackrel{*}{\leftrightarrow} y</math> then
* If both ''x'' and ''y'' are normal forms, then ''x'' = ''y''.
* If ''y'' is a normal form, then <math>x \stackrel{*}{\rightarrow} y</math>

Because of these equivalences, a fair bit of variation in definitions is encountered in the literature. For instance, in Terese the Church-Rosser property and confluence are defined to be synonymous and identical to the definition of confluence presented here; Church-Rosser as defined here remains unnamed, but is given as an equivalent property; this departure from other texts is deliberate.<ref>Terese p.11</ref> Because of the above corollary, one may define a normal form ''y'' of ''x'' as an irreducible ''y'' with the property that <math>x \stackrel{*}{\leftrightarrow} y</math>. This definition, found in Book and Otto, is equivalent to the common one given here in a confluent system, but it is more inclusive in a non-confluent ARS.

Local confluence on the other hand is not equivalent with the other notions of confluence given in this section, but it is strictly weaker than confluence. The typical counterexample is <math>\{b\rightarrow c, c\rightarrow b, b\rightarrow a, c\rightarrow d\}</math>, which is locally confluent but not confluent (cf. picture).

== Termination and convergence ==
An abstract rewriting system is said to be '''terminating''' or '''noetherian''' if there is no infinite chain <math>x_0 \rightarrow x_1 \rightarrow x_2 \rightarrow \cdots</math>. (This is just saying that the rewriting relation is a [[Noetherian relation]].) In a terminating ARS, every object has at least one normal form, thus it is normalizing. The converse is not true. In example 1 for instance, there is an infinite rewriting chain, namely <math>a \rightarrow b \rightarrow a \rightarrow b \rightarrow \cdots</math>, even though the system is normalizing. A confluent and terminating ARS is called '''canonical''',<ref>{{cite book| author=David A. Duffy| title=Principles of Automated Theorem Proving| year=1991| publisher=Wiley}} Here: sect.7.2.1, p.153</ref> or '''convergent'''. In a convergent ARS, every object has a unique normal form. But it is sufficient for the system to be confluent and normalizing for a unique normal to exist for every element, as seen in example 1.

'''Theorem''' ([[Newman's Lemma]]): A terminating ARS is confluent if and only if it is locally confluent.

The original 1942 proof of this result by Newman was rather complicated. It wasn't until 1980 that Huet published a much simpler proof exploiting the fact that when <math>\rightarrow</math> is terminating we can apply [[well-founded induction]].<ref>Harrison, p. 260</ref>

== Notes ==
{{reflist|3}}

== Further reading ==
* {{cite book|first1=Franz|last1=Baader|authorlink1=Franz Baader|first2=Tobias|last2=Nipkow|authorlink2=Tobias Nipkow|title=Term Rewriting and All That|year=1998|publisher=Cambridge University Press|ref=harv|url=https://books.google.com/books?id=N7BvXVUCQk8C&printsec=frontcover#v=onepage&q&f=false|isbn=9780521779203}} A textbook suitable for undergraduates.
* [[Nachum Dershowitz]] and [[Jean-Pierre Jouannaud]] [http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.64.3114 ''Rewrite Systems''], Chapter 6 in [[Jan van Leeuwen]] (Ed.), ''Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics.'', Elsevier and MIT Press, 1990, {{ISBN|0-444-88074-7}}, pp.&nbsp;243&ndash;320. The [[preprint]] of this chapter is freely available from the authors, but it misses the figures.
* [[Ronald V. Book]] and Friedrich Otto, ''String-rewriting Systems'', Springer (1993). Chapter 1, "Abstract reduction systems"
* [[Marc Bezem]], [[Jan Willem Klop]], [[Roel de Vrijer]] ("Terese"), ''Term rewriting systems'', Cambridge University Press, 2003, {{ISBN|0-521-39115-6}}, Chapter 1. This is a comprehensive monograph. It uses, however, a fair deal of notations and definitions not commonly encountered elsewhere. For instance the Church&ndash;Rosser property is defined to be identical with confluence.
* [[John Harrison]], ''Handbook of Practical Logic and Automated Reasoning'', Cambridge University Press, 2009, {{ISBN|978-0-521-89957-4}}, chapter 4 "Equality". Abstract rewriting from the practical perspective of solving problems in [[equational logic]].
* [[Gérard Huet]], ''Confluent Reductions: Abstract Properties and Applications to Term Rewriting Systems'', Journal of the ACM ([[JACM]]), October 1980, Volume 27, Issue 4, pp.&nbsp;797&ndash;821. Huet's paper established many of the modern concepts, results and notations.
* Sinyor, J.; [http://downloads.hindawi.com/journals/ijmms/2010/458563.pdf  "The 3x+1 Problem as a String Rewriting System"], ''International Journal of Mathematics and Mathematical Sciences'', Volume 2010 (2010), Article ID 458563, 6 pages.

[[Category:Formal languages]]
[[Category:Logic in computer science]]
[[Category:Rewriting systems]]