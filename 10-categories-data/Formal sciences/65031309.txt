{{Lead too short|date=October 2020}}
This article discusses computational tools used in [[artificial intelligence]].

== Search and optimization ==
{{Main|Search algorithm|Mathematical optimization|Evolutionary computation}}
Many problems in AI can be solved theoretically by intelligently searching through many possible solutions:<ref name="Search">[[Search algorithm|Search algorithms]]:

* {{Harvnb|Russell|Norvig|2003|pp=59–189}}
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=113–163}}
* {{Harvnb|Luger|Stubblefield|2004|pp=79–164, 193–219}}
* {{Harvnb|Nilsson|1998|loc=chpt. 7–12}}</ref> [[Applications of artificial intelligence#Deduction, reasoning, problem solving|Reasoning]] can be reduced to performing a search. For example, logical proof can be viewed as searching for a path that leads from [[Premise|premises]] to [[Logical consequence|conclusions]], where each step is the application of an [[inference rule]].<ref name="Logic as search">[[Forward chaining]], [[backward chaining]], [[Horn clause|Horn clauses]], and logical deduction as search:

* {{Harvnb|Russell|Norvig|2003|pp=217–225, 280–294}}
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=~46–52}}
* {{Harvnb|Luger|Stubblefield|2004|pp=62–73}}
* {{Harvnb|Nilsson|1998|loc=chpt. 4.2, 7.2}}</ref> [[Automated planning and scheduling|Planning]] algorithms search through trees of goals and subgoals, attempting to find a path to a target goal, a process called [[means-ends analysis]].<ref name="Planning as search">[[State space search]] and [[Automated planning and scheduling|planning]]:

* {{Harvnb|Russell|Norvig|2003|pp=382–387}}
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=298–305}}
* {{Harvnb|Nilsson|1998|loc=chpt. 10.1–2}}</ref> [[Robotics]] algorithms for moving limbs and grasping objects use [[Local search (optimization)|local searches]] in [[Configuration space (physics)|configuration space]].<ref name="Configuration space">Moving and [[Configuration space (physics)|configuration space]]:

* {{Harvnb|Russell|Norvig|2003|pp=916–932}}</ref> Many [[Machine learning|learning]] algorithms use search algorithms based on [[Optimization (mathematics)|optimization]].

Simple exhaustive searches<ref name="Uninformed search">Uninformed searches ([[breadth first search]], [[depth first search]] and general [[state space search]]):

* {{Harvnb|Russell|Norvig|2003|pp=59–93}}
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=113–132}}
* {{Harvnb|Luger|Stubblefield|2004|pp=79–121}}
* {{Harvnb|Nilsson|1998|loc=chpt. 8}}</ref> are rarely sufficient for most real-world problems: the [[Search algorithm|search space]] (the number of places to search) quickly grows to [[Astronomically large|astronomical numbers]]. The result is a search that is [[Computation time|too slow]] or never completes. The solution, for many problems, is to use "[[heuristics]]" or "rules of thumb" that prioritize choices in favor of those more likely to reach a goal and to do so in a shorter number of steps. In some search methodologies heuristics can also serve to entirely eliminate some choices unlikely to lead to a goal (called "[[Pruning (algorithm)|pruning]] the [[search tree]]"). [[Heuristics]] supply the program with a "best guess" for the path on which the solution lies.<ref name="Informed search">[[Heuristic]] or informed searches (e.g., greedy [[Best-first search|best first]] and [[A* search algorithm|A*]]):

* {{Harvnb|Russell|Norvig|2003|pp=94–109}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=pp. 132–147}},
* {{Harvnb|Luger|Stubblefield|2004|pp=133–150}},
* {{Harvnb|Nilsson|1998|loc=chpt. 9}},</ref><ref>{{cite book|last1=Poole|first1=David|url=http://artint.info/index.html|title=Artificial Intelligence: Foundations of Computational Agents|last2=Mackworth|first2=Alan|publisher=Cambridge University Press|year=2017|isbn=978-1-107-19539-4|edition=2nd|at=Section 3.6|ref=harv|author-link=David Poole (researcher)|author2-link=Alan Mackworth}}</ref> Heuristics limit the search for solutions into a smaller sample size.<ref>{{cite journal|last=Tecuci|first=Gheorghe|date=March–April 2012|title=Artificial Intelligence|journal=Wiley Interdisciplinary Reviews: Computational Statistics|volume=4|issue=2|pages=168–180|doi=10.1002/wics.200|ref=harv}}</ref>

A very different kind of search came to prominence in the 1990s, based on the mathematical theory of [[Optimization (mathematics)|optimization]]. For many problems, it is possible to begin the search with some form of a guess and then refine the guess incrementally until no more refinements can be made. These algorithms can be visualized as blind [[hill climbing]]: we begin the search at a random point on the landscape, and then, by jumps or steps, we keep moving our guess uphill, until we reach the top. Other optimization algorithms are [[simulated annealing]], [[beam search]] and [[random optimization]].<ref name="Optimization search">[[Optimization (mathematics)|Optimization]] searches:

* {{Harvnb|Russell|Norvig|2003|pp=110–116,120–129}}
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=56–163}}
* {{Harvnb|Luger|Stubblefield|2004|pp=127–133}}</ref>
[[File:ParticleSwarmArrowsAnimation.gif|thumb|A [[Particle swarm optimization|particle swarm]] seeking the [[global minimum]]]]
[[Evolutionary computation]] uses a form of optimization search. For example, they may begin with a population of organisms (the guesses) and then allow them to mutate and recombine, [[Artificial selection|selecting]] only the fittest to survive each generation (refining the guesses). Classic [[evolutionary algorithms]] include [[genetic algorithms]], [[gene expression programming]], and [[genetic programming]].<ref name="Genetic programming">[[Genetic programming]] and [[genetic algorithms]]:

* {{Harvnb|Luger|Stubblefield|2004|pp=509–530}},
* {{Harvnb|Nilsson|1998|loc=chpt. 4.2}}.</ref>*<ref>{{cite book|last=Holland|first=John H.|url=https://archive.org/details/adaptationinnatu00holl|title=Adaptation in Natural and Artificial Systems|publisher=University of Michigan Press|year=1975|isbn=978-0-262-58111-0|ref=harv|url-access=registration}}</ref><ref>{{cite book|last=Koza|first=John R.|title=Genetic Programming (On the Programming of Computers by Means of Natural Selection)|publisher=MIT Press|year=1992|isbn=978-0-262-11170-6|bibcode=1992gppc.book.....K|ref=harv}}</ref><ref>{{cite book|last1=Poli|first1=R.|url=http://www.gp-field-guide.org.uk/|title=A Field Guide to Genetic Programming|last2=Langdon|first2=W. B.|last3=McPhee|first3=N. F.|publisher=Lulu.com|year=2008|isbn=978-1-4092-0073-4|ref=harv|via=gp-field-guide.org.uk}}</ref> Alternatively, distributed search processes can coordinate via [[swarm intelligence]] algorithms. Two popular swarm algorithms used in search are [[particle swarm optimization]] (inspired by bird [[Flocking (behavior)|flocking]]) and [[ant colony optimization]] (inspired by [[Ant trail|ant trails]]).<ref name="Society based learning">[[Artificial life]] and society based learning:

* {{Harvnb|Luger|Stubblefield|2004|pp=530–541}}</ref><ref>{{cite book|author1=Daniel Merkle|title=Search Methodologies: Introductory Tutorials in Optimization and Decision Support Techniques|author2=Martin Middendorf|date=2013|publisher=Springer Science & Business Media|isbn=978-1-4614-6940-7|editor1-last=Burke|editor1-first=Edmund K.|language=en|chapter=Swarm Intelligence|editor2-last=Kendall|editor2-first=Graham}}</ref>

== Logic ==
{{Main|Logic programming|Automated reasoning}}
[[Logic]]<ref name="Logic">[[Logic]]:
* {{Harvnb|Russell|Norvig|2003|pp=194–310}},
* {{Harvnb|Luger|Stubblefield|2004|pp=35–77}},
* {{Harvnb|Nilsson|1998|loc=chpt. 13–16}}</ref><ref name="ACM1998">{{cite web|year=1998|title=ACM Computing Classification System: Artificial intelligence|url=http://www.acm.org/class/1998/I.2.html|url-status=dead|archiveurl=https://web.archive.org/web/20071012025921/http://www.acm.org/class/1998/I.2.html|archivedate=12 October 2007|accessdate=30 August 2007|publisher=[[Association for Computing Machinery|ACM]]|ref={{harvid|ACM|1998}}|df=dmy-all|at=~I.2.3 and ~I.2.4}}</ref> is used for knowledge representation and problem solving, but it can be applied to other problems as well. For example, the [[satplan]] algorithm uses logic for [[Automated planning and scheduling|planning]]<ref name="Satplan">[[Satplan]]:

* {{Harvnb|Russell|Norvig|2003|pp=402–407}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=300–301}},
* {{Harvnb|Nilsson|1998|loc=chpt. 21}}</ref> and [[inductive logic programming]] is a method for [[Machine learning|learning]].<ref name="Symbolic learning techniques">[[Explanation based learning]], relevance based learning, [[inductive logic programming]], [[case based reasoning]]:

* {{Harvnb|Russell|Norvig|2003|pp=678–710}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=414–416}},
* {{Harvnb|Luger|Stubblefield|2004|pp=~422–442}},
* {{Harvnb|Nilsson|1998|loc=chpt. 10.3, 17.5}}</ref>

Several different forms of logic are used in AI research. [[Propositional logic]]<ref name="Propositional logic">[[Propositional logic]]:

* {{Harvnb|Russell|Norvig|2003|pp=204–233}},
* {{Harvnb|Luger|Stubblefield|2004|pp=45–50}}
* {{Harvnb|Nilsson|1998|loc=chpt. 13}}</ref> involves [[Truth function|truth functions]] such as "or" and "not". [[First-order logic]]<ref name="First-order logic">[[First-order logic]] and features such as [[Equality (mathematics)|equality]]:
* {{Harvnb|Russell|Norvig|2003|pp=240–310}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=268–275}},
* {{Harvnb|Luger|Stubblefield|2004|pp=50–62}},
* {{Harvnb|Nilsson|1998|loc=chpt. 15}}</ref><ref name="ACM1998"/> adds [[Quantifier (logic)|quantifiers]] and [[Predicate (mathematical logic)|predicates]], and can express facts about objects, their properties, and their relations with each other. [[Fuzzy set theory]] assigns a "degree of truth" (between 0 and 1) to vague statements such as "Alice is old" (or rich, or tall, or hungry) that are too linguistically imprecise to be completely true or false. [[Fuzzy logic]] is successfully used in [[Control system|control systems]] to allow experts to contribute vague rules such as "if you are close to the destination station and moving fast, increase the train's brake pressure"; these vague rules can then be numerically refined within the system. Fuzzy logic fails to scale well in knowledge bases; many AI researchers question the validity of chaining fuzzy-logic inferences.{{efn|"There exist many different types of uncertainty, vagueness, and ignorance... [We] independently confirm the inadequacy of systems for reasoning about uncertainty that propagates numerical factors according to only to which connectives appear in assertions."<ref>{{cite journal|last1=Elkan|first1=Charles|title=The paradoxical success of fuzzy logic|journal=IEEE Expert|date=1994|volume=9|issue=4|pages=3–49|doi=10.1109/64.336150|citeseerx=10.1.1.100.8402}}</ref>}}<ref name="Fuzzy logic">[[Fuzzy logic]]:

* {{Harvnb|Russell|Norvig|2003|pp=526–527}}</ref><ref>{{cite news|title=What is 'fuzzy logic'? Are there computers that are inherently fuzzy and do not apply the usual binary logic?|language=en|work=Scientific American|url=https://www.scientificamerican.com/article/what-is-fuzzy-logic-are-t/|accessdate=5 May 2018}}</ref>

[[Default logic|Default logics]], [[Non-monotonic logic|non-monotonic logics]] and [[Circumscription (logic)|circumscription]]<ref name="Default reasoning and non-monotonic logic">Default reasoning and [[default logic]], [[Non-monotonic logic|non-monotonic logics]], [[Circumscription (logic)|circumscription]], [[closed world assumption]], [[Abductive reasoning|abduction]] (Poole ''et al.'' places abduction under "default reasoning". Luger ''et al.'' places this under "uncertain reasoning"):

* {{Harvnb|Russell|Norvig|2003|pp=354–360}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=248–256, 323–335}},
* {{Harvnb|Luger|Stubblefield|2004|pp=335–363}},
* {{Harvnb|Nilsson|1998|loc=~18.3.3}}</ref> are forms of logic designed to help with default reasoning and the [[qualification problem]]. Several extensions of logic have been designed to handle specific domains of [[Knowledge representation|knowledge]], such as: [[Description logic|description logics]];<ref name="Representing categories and relations">Representing categories and relations: [[Semantic network|Semantic networks]], [[Description logic|description logics]], [[Inheritance (computer science)|inheritance]] (including [[Frame (artificial intelligence)|frames]] and [[Scripts (artificial intelligence)|scripts]]):

* {{Harvnb|Russell|Norvig|2003|pp=349–354}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=174–177}},
* {{Harvnb|Luger|Stubblefield|2004|pp=248–258}},
* {{Harvnb|Nilsson|1998|loc=chpt. 18.3}}</ref> [[situation calculus]], [[event calculus]] and [[fluent calculus]] (for representing events and time);<ref name="Representing time">Representing events and time:[[Situation calculus]], [[event calculus]], [[fluent calculus]] (including solving the [[frame problem]]):

* {{Harvnb|Russell|Norvig|2003|pp=328–341}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=281–298}},
* {{Harvnb|Nilsson|1998|loc=chpt. 18.2}}</ref> [[Causality#Causal calculus|causal calculus]];<ref name="Representing causation">[[Causality#Causal calculus|Causal calculus]]:

* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=335–337}}</ref> [[Belief revision|belief calculus (belief revision)]];<ref>"The Belief Calculus and Uncertain Reasoning", Yen-Teh Hsia</ref> and [[Modal logic|modal logics]].<ref name="Representing knowledge about knowledge">Representing knowledge about knowledge: Belief calculus, [[Modal logic|modal logics]]:

* {{Harvnb|Russell|Norvig|2003|pp=341–344}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=275–277}}</ref> Logics to model contradictory or inconsistent statements arising in multi-agent systems have also been designed, such as [[Paraconsistent logic|paraconsistent logics]].

== Probabilistic methods for uncertain reasoning ==
{{Main|Bayesian network|Hidden Markov model|Kalman filter|Particle filter|Decision theory|Utility theory}}
[[File:EM_Clustering_of_Old_Faithful_data.gif|right|frame|[[Expectation-maximization]] clustering of [[Old Faithful]] eruption data starts from a random guess but then successfully converges on an accurate clustering of the two physically distinct modes of eruption.]]
Many problems in AI (in reasoning, planning, learning, perception, and robotics) require the agent to operate with incomplete or uncertain information. AI researchers have devised a number of powerful tools to solve these problems using methods from [[probability]] theory and economics.<ref name="Stochastic methods for uncertain reasoning">Stochastic methods for uncertain reasoning:
* {{Harvnb|Russell|Norvig|2003|pp=462–644}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=345–395}},
* {{Harvnb|Luger|Stubblefield|2004|pp=165–191, 333–381}},
* {{Harvnb|Nilsson|1998|loc=chpt. 19}}</ref><ref name="ACM1998"/>

[[Bayesian network|Bayesian networks]]<ref name="Bayesian networks">[[Bayesian network|Bayesian networks]]:

* {{Harvnb|Russell|Norvig|2003|pp=492–523}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=361–381}},
* {{Harvnb|Luger|Stubblefield|2004|pp=~182–190, ≈363–379}},
* {{Harvnb|Nilsson|1998|loc=chpt. 19.3–4}}</ref> are a very general tool that can be used for various problems: reasoning (using the [[Bayesian inference]] algorithm),<ref name="Bayesian inference">[[Bayesian inference]] algorithm:

* {{Harvnb|Russell|Norvig|2003|pp=504–519}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=361–381}},
* {{Harvnb|Luger|Stubblefield|2004|pp=~363–379}},
* {{Harvnb|Nilsson|1998|loc=chpt. 19.4 & 7}}</ref> [[Machine learning|learning]] (using the [[expectation-maximization algorithm]]),{{efn|Expectation-maximization, one of the most popular algorithms in machine learning, allows clustering in the presence of unknown [[latent variables]]<ref name="Domingos2005"/>{{rp|210}}}}<ref name="Bayesian learning">[[Bayesian learning]] and the [[expectation-maximization algorithm]]:

* {{Harvnb|Russell|Norvig|2003|pp=712–724}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=424–433}},
* {{Harvnb|Nilsson|1998|loc=chpt. 20}}</ref> [[Automated planning and scheduling|planning]] (using [[Decision network|decision networks]])<ref name="Bayesian decision networks">[[Bayesian decision theory]] and Bayesian [[Decision network|decision networks]]:

* {{Harvnb|Russell|Norvig|2003|pp=597–600}}</ref> and [[Machine perception|perception]] (using [[Dynamic Bayesian network|dynamic Bayesian networks]]).<ref name="Stochastic temporal models">Stochastic temporal models:

* {{Harvnb|Russell|Norvig|2003|pp=537–581}}
[[Dynamic Bayesian network|Dynamic Bayesian networks]]:

* {{Harvnb|Russell|Norvig|2003|pp=551–557}}
[[Hidden Markov model]]:

* {{Harv|Russell|Norvig|2003|pp=549–551}}
[[Kalman filter|Kalman filters]]:

* {{Harvnb|Russell|Norvig|2003|pp=551–557}}</ref> Probabilistic algorithms can also be used for filtering, prediction, smoothing and finding explanations for streams of data, helping [[Machine perception|perception]] systems to analyze processes that occur over time (e.g., [[Hidden Markov model|hidden Markov models]] or [[Kalman filter|Kalman filters]]).<ref name="Stochastic temporal models" /> Compared with symbolic logic, formal Bayesian inference is computationally expensive. For inference to be tractable, most observations must be [[conditionally independent]] of one another. Complicated graphs with diamonds or other "loops" (undirected [[Cycle (graph theory)|cycles]]) can require a sophisticated method such as [[Markov chain Monte Carlo]], which spreads an ensemble of [[Random walk|random walkers]] throughout the Bayesian network and attempts to converge to an assessment of the conditional probabilities. Bayesian networks are used on [[Xbox Live]] to rate and match players; wins and losses are "evidence" of how good a player is{{citation needed|date=July 2019}}. [[Google AdSense|AdSense]] uses a Bayesian network with over 300&nbsp;million edges to learn which ads to serve.<ref name="Domingos2005">{{cite book|last1=Domingos|first1=Pedro|title=The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World|title-link=The Master Algorithm|publisher=Basic Books|year=2015|isbn=978-0-465-06192-1|ref=harv|author-link=Pedro Domingos}}</ref>{{rp|chapter 6}}

A key concept from the science of economics is "[[utility]]": a measure of how valuable something is to an intelligent agent. Precise mathematical tools have been developed that analyze how an agent can make choices and plan, using [[decision theory]], [[decision analysis]], <ref name="Decisions theory and analysis">[[decision theory]] and [[decision analysis]]:

* {{Harvnb|Russell|Norvig|2003|pp=584–597}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=381–394}}</ref> and [[Applied information economics|information value theory]].<ref name="Information value theory">[[Applied information economics|Information value theory]]:

* {{Harvnb|Russell|Norvig|2003|pp=600–604}}</ref> These tools include models such as [[Markov decision process|Markov decision processes]],<ref name="Markov decision process">[[Markov decision process|Markov decision processes]] and dynamic [[Decision network|decision networks]]:

* {{Harvnb|Russell|Norvig|2003|pp=613–631}}</ref> dynamic [[Decision network|decision networks]],<ref name="Stochastic temporal models" /> [[game theory]] and [[mechanism design]].<ref name="Game theory and mechanism design">[[Game theory]] and [[mechanism design]]:

* {{Harvnb|Russell|Norvig|2003|pp=631–643}}</ref>

== Classifiers and statistical learning methods ==
{{Main|Classifier (mathematics)|Statistical classification|Machine learning}}
The simplest AI applications can be divided into two types: classifiers ("if shiny then diamond") and controllers ("if shiny then pick up"). Controllers do, however, also classify conditions before inferring actions, and therefore classification forms a central part of many AI systems. [[Classifier (mathematics)|Classifiers]] are functions that use [[pattern matching]] to determine a closest match. They can be tuned according to examples, making them very attractive for use in AI. These examples are known as observations or patterns. In supervised learning, each pattern belongs to a certain predefined class. A class is a decision that has to be made. All the observations combined with their class labels are known as a data set. When a new observation is received, that observation is classified based on previous experience.<ref name="Classifiers">Statistical learning methods and [[Classifier (mathematics)|classifiers]]:

* {{Harvnb|Russell|Norvig|2003|pp=712–754}},
* {{Harvnb|Luger|Stubblefield|2004|pp=453–541}}</ref>

A classifier can be trained in various ways; there are many statistical and [[machine learning]] approaches. The [[Decision tree learning|decision tree]]<ref name="Decision tree">[[Alternating decision tree|Decision tree]]:

* {{Harvnb|Russell|Norvig|2003|pp=653–664}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=403–408}},
* {{Harvnb|Luger|Stubblefield|2004|pp=408–417}}</ref> is perhaps the most widely used machine learning algorithm.<ref name="Domingos2005"/>{{rp|88}} Other widely used classifiers are the [[Artificial neural network|neural network]],<ref name="Neural networks">Neural networks and connectionism:
* {{Harvnb|Russell|Norvig|2003|pp=736–748}},
* {{Harvnb|Poole|Mackworth|Goebel|1998|pp=408–414}},
* {{Harvnb|Luger|Stubblefield|2004|pp=453–505}},
* {{Harvnb|Nilsson|1998|loc=chpt. 3}}</ref> [[k-nearest neighbor algorithm]],{{efn|The most widely used analogical AI until the mid-1990s<ref name="Domingos2005"/>{{rp|187}}}}<ref name="K-nearest neighbor algorithm">[[K-nearest neighbor algorithm]]:

* {{Harvnb|Russell|Norvig|2003|pp=733–736}}</ref> [[kernel methods]] such as the [[support vector machine]] (SVM),{{efn|SVM displaced k-nearest neighbor in the 1990s<ref name="Domingos2005"/>{{rp|188}}}}<ref name="Kernel methods">[[kernel methods]] such as the [[support vector machine]]:

* {{Harvnb|Russell|Norvig|2003|pp=749–752}}</ref> [[Gaussian mixture model]],<ref name="Gaussian mixture model">[[Gaussian mixture model]]:

* {{Harvnb|Russell|Norvig|2003|pp=725–727}}</ref> and the extremely popular [[naive Bayes classifier]].{{efn|Naive Bayes is reportedly the "most widely used learner" at Google, due in part to its scalability.<ref name="Domingos2005"/>{{rp|152}}}}<ref name="Naive Bayes classifier">[[Naive Bayes classifier]]:

* {{Harvnb|Russell|Norvig|2003|p=718}}</ref> Classifier performance depends greatly on the characteristics of the data to be classified, such as the dataset size, distribution of samples across classes, the dimensionality, and the level of noise. Model-based classifiers perform well if the assumed model is an extremely good fit for the actual data. Otherwise, if no matching model is available, and if accuracy (rather than speed or scalability) is the sole concern, conventional wisdom is that discriminative classifiers (especially SVM) tend to be more accurate than model-based classifiers such as "naive Bayes" on most practical data sets.<ref name="Classifier performance">{{cite web|last1=van der Walt|first1=Christiaan|last2=Bernard|first2=Etienne|year=2006|title=Data characteristics that determine classifier performance|url=http://www.patternrecognition.co.za/publications/cvdwalt_data_characteristics_classifiers.pdf|url-status=dead|archiveurl=https://web.archive.org/web/20090325194051/http://www.patternrecognition.co.za/publications/cvdwalt_data_characteristics_classifiers.pdf|archivedate=25 March 2009|accessdate=5 August 2009|ref=harv|df=}}</ref><ref>{{Cite book|last1=Russell|first1=Stuart J.|title=[[Artificial Intelligence: A Modern Approach]] <!-- | url = http://aima.cs.berkeley.edu/ -->|last2=Norvig|first2=Peter|publisher=Prentice Hall|year=2009|isbn=978-0-13-604259-4|edition=3rd|location=Upper Saddle River, New Jersey|pages=|ref=harv|author-link=Stuart J. Russell|author2-link=Peter Norvig|at=18.12: Learning from Examples: Summary}}</ref>

== Artificial neural networks ==
{{Main|Artificial neural network|Connectionism}}
[[File:Artificial_neural_network.svg|thumb|A neural network is an interconnected group of nodes, akin to the vast network of [[Neuron|neurons]] in the [[human brain]].]]
Neural networks were inspired by the architecture of neurons in the human brain. A simple "neuron" ''N'' accepts input from other neurons, each of which, when activated (or "fired"), casts a weighted "vote" for or against whether neuron ''N'' should itself activate. Learning requires an algorithm to adjust these weights based on the training data; one simple algorithm (dubbed "[[Hebbian learning|fire together, wire together]]") is to increase the weight between two connected neurons when the activation of one triggers the successful activation of another. The neural network forms "concepts" that are distributed among a subnetwork of shared{{efn|Each individual neuron is likely to participate in more than one concept.}} neurons that tend to fire together; a concept meaning "leg" might be coupled with a subnetwork meaning "foot" that includes the sound for "foot". Neurons have a continuous spectrum of activation; in addition, neurons can process inputs in a nonlinear way rather than weighing straightforward votes. Modern neural networks can learn both continuous functions and, surprisingly, digital logical operations. Neural networks' early successes included predicting the stock market and (in 1995) a mostly self-driving car.{{efn|Steering for the 1995 "[[History of autonomous cars#1990s|No Hands Across America]]" required "only a few human assists".}}<ref name="Domingos2005"/>{{rp|Chapter 4}} In the 2010s, advances in neural networks using deep learning thrust AI into widespread public consciousness and contributed to an enormous upshift in corporate AI spending; for example, AI-related [[Mergers and acquisitions|M&A]] in 2017 was over 25 times as large as in 2015.<ref>{{cite news|date=2016|title=Why Deep Learning Is Suddenly Changing Your Life|work=Fortune|url=http://fortune.com/ai-artificial-intelligence-deep-machine-learning/|accessdate=12 March 2018}}</ref><ref>{{cite news|date=2017|title=Google leads in the race to dominate artificial intelligence|language=en|work=The Economist|url=https://www.economist.com/news/business/21732125-tech-giants-are-investing-billions-transformative-technology-google-leads-race|accessdate=12 March 2018}}</ref>

The study of non-learning [[Artificial neural network|artificial neural networks]]<ref name="Neural networks"/> began in the decade before the field of AI research was founded, in the work of [[Walter Pitts]] and [[Warren McCullouch]]. [[Frank Rosenblatt]] invented the [[perceptron]], a learning network with a single layer, similar to the old concept of [[linear regression]]. Early pioneers also include [[Alexey Grigorevich Ivakhnenko]], [[Teuvo Kohonen]], [[Stephen Grossberg]], [[Kunihiko Fukushima]], [[Christoph von der Malsburg]], David Willshaw, [[Shun-Ichi Amari]], [[Bernard Widrow]], [[John Hopfield]], [[Eduardo R. Caianiello]], and others{{citation needed|date=July 2019}}.

The main categories of networks are acyclic or [[Feedforward neural network|feedforward neural networks]] (where the signal passes in only one direction) and [[Recurrent neural network|recurrent neural networks]] (which allow feedback and short-term memories of previous input events). Among the most popular feedforward networks are [[Perceptron|perceptrons]], [[Multi-layer perceptron|multi-layer perceptrons]] and [[Radial basis network|radial basis networks]].<ref name="Feedforward neural networks">[[Feedforward neural network|Feedforward neural networks]], [[Perceptron|perceptrons]] and [[Radial basis network|radial basis networks]]:

* {{Harvnb|Russell|Norvig|2003|pp=739–748, 758}}
* {{Harvnb|Luger|Stubblefield|2004|pp=458–467}}</ref> Neural networks can be applied to the problem of [[intelligent control]] (for robotics) or [[Machine learning|learning]], using such techniques as [[Hebbian learning]] ("fire together, wire together"), [[GMDH]] or [[competitive learning]].<ref name="Learning in neural networks">[[Competitive learning]], [[Hebbian theory|Hebbian]] coincidence learning, [[Hopfield network|Hopfield networks]] and attractor networks:

* {{Harvnb|Luger|Stubblefield|2004|pp=474–505}}</ref>

Today, neural networks are often trained by the [[backpropagation]] algorithm, which has been around since 1970 as the reverse mode of [[automatic differentiation]] published by [[Seppo Linnainmaa]],<ref name="lin1970">[[Seppo Linnainmaa]] (1970). The representation of the cumulative rounding error of an algorithm as a Taylor expansion of the local rounding errors. Master's Thesis (in Finnish), Univ. Helsinki, 6–7.</ref><ref name="grie2012">Griewank, Andreas (2012). Who Invented the Reverse Mode of Differentiation?. Optimization Stories, Documenta Matematica, Extra Volume ISMP (2012), 389–400.</ref> and was introduced to neural networks by [[Paul Werbos]].<ref name="WERBOS1974">[[Paul Werbos]], "Beyond Regression: New Tools for Prediction and Analysis in the Behavioral Sciences", ''PhD thesis, Harvard University'', 1974.</ref><ref name="werbos1982">[[Paul Werbos]] (1982). Applications of advances in nonlinear sensitivity analysis. In System modeling and optimization (pp. 762–770). Springer Berlin Heidelberg. [http://werbos.com/Neural/SensitivityIFIPSeptember1981.pdf Online] {{webarchive|url=https://web.archive.org/web/20160414055503/http://werbos.com/Neural/SensitivityIFIPSeptember1981.pdf|date=14 April 2016}}</ref><ref name="Backpropagation">[[Backpropagation]]:

* {{Harvnb|Russell|Norvig|2003|pp=744–748}},
* {{Harvnb|Luger|Stubblefield|2004|pp=467–474}},
* {{Harvnb|Nilsson|1998|loc=chpt. 3.3}}</ref>

[[Hierarchical temporal memory]] is an approach that models some of the structural and algorithmic properties of the [[neocortex]].<ref name="Hierarchical temporal memory">{{cite book|last1=Hawkins|first1=Jeff|title=On Intelligence|title-link=On Intelligence|last2=Blakeslee|first2=Sandra|publisher=Owl Books|year=2005|isbn=978-0-8050-7853-4|location=New York, NY|ref=harv|author-link=Jeff Hawkins}}</ref>

To summarize, most neural networks use some form of [[gradient descent]] on a hand-created neural topology. However, some research groups, such as [[Uber]], argue that simple [[neuroevolution]] to mutate new neural network topologies and weights may be competitive with sophisticated gradient descent approaches{{citation needed|date=July 2019}}. One advantage of neuroevolution is that it may be less prone to get caught in "dead ends".<ref>{{cite news|date=10 January 2018|title=Artificial intelligence can 'evolve' to solve problems|language=en|work=Science {{!}} AAAS|url=http://www.sciencemag.org/news/2018/01/artificial-intelligence-can-evolve-solve-problems|accessdate=7 February 2018}}</ref>

=== Deep feedforward neural networks ===
{{Main|Deep learning}}
[[Deep learning]] is the use of [[Artificial neural network|artificial neural networks]] which have several layers of neurons between the network's inputs and outputs. Deep learning has transformed many important subfields of artificial intelligence{{why|date=July 2019}}, including [[computer vision]], [[speech recognition]], [[natural language processing]] and others.<ref name="goodfellow2016">Ian Goodfellow, Yoshua Bengio, and Aaron Courville (2016). Deep Learning. MIT Press. [http://www.deeplearningbook.org Online] {{webarchive|url=https://web.archive.org/web/20160416111010/http://www.deeplearningbook.org/|date=16 April 2016}}</ref><ref name="HintonDengYu2012">{{cite journal|last1=Hinton|first1=G.|last2=Deng|first2=L.|last3=Yu|first3=D.|last4=Dahl|first4=G.|last5=Mohamed|first5=A.|last6=Jaitly|first6=N.|last7=Senior|first7=A.|last8=Vanhoucke|first8=V.|last9=Nguyen|first9=P.|last10=Sainath|first10=T.|last11=Kingsbury|first11=B.|year=2012|title=Deep Neural Networks for Acoustic Modeling in Speech Recognition – The shared views of four research groups|url=|journal=IEEE Signal Processing Magazine|volume=29|issue=6|pages=82–97|bibcode=2012ISPM...29...82H|doi=10.1109/msp.2012.2205597}}</ref><ref name="schmidhuber2015">{{cite journal|last=Schmidhuber|first=J.|year=2015|title=Deep Learning in Neural Networks: An Overview|journal=Neural Networks|volume=61|pages=85–117|arxiv=1404.7828|doi=10.1016/j.neunet.2014.09.003|pmid=25462637}}</ref>

According to one overview,<ref name="scholarpedia">{{cite journal|last1=Schmidhuber|first1=Jürgen|authorlink=Jürgen Schmidhuber|year=2015|title=Deep Learning|journal=Scholarpedia|volume=10|issue=11|page=32832|bibcode=2015SchpJ..1032832S|doi=10.4249/scholarpedia.32832|doi-access=free|df=dmy-all}}</ref> the expression "Deep Learning" was introduced to the [[machine learning]] community by [[Rina Dechter]] in 1986<ref name="dechter1986">[[Rina Dechter]] (1986). Learning while searching in constraint-satisfaction problems. University of California, Computer Science Department, Cognitive Systems Laboratory.[https://www.researchgate.net/publication/221605378_Learning_While_Searching_in_Constraint-Satisfaction-Problems Online] {{webarchive|url=https://web.archive.org/web/20160419054654/https://www.researchgate.net/publication/221605378_Learning_While_Searching_in_Constraint-Satisfaction-Problems|date=19 April 2016}}</ref> and gained traction after Igor Aizenberg and colleagues introduced it to [[Artificial neural network|artificial neural networks]] in 2000.<ref name="aizenberg2000">Igor Aizenberg, Naum N. Aizenberg, Joos P.L. Vandewalle (2000). Multi-Valued and Universal Binary Neurons: Theory, Learning and Applications. Springer Science & Business Media.</ref> The first functional Deep Learning networks were published by [[Alexey Grigorevich Ivakhnenko]] and V. G. Lapa in 1965.<ref>{{Cite book|last=Ivakhnenko|first=Alexey|title=Cybernetic Predicting Devices|publisher=Naukova Dumka|year=1965|isbn=|location=Kiev|pages=}}</ref>{{page needed|date=December 2016}} These networks are trained one layer at a time. Ivakhnenko's 1971 paper<ref name="ivak1971">{{Cite journal|last1=Ivakhnenko|first1=A. G.|year=1971|title=Polynomial Theory of Complex Systems|journal=IEEE Transactions on Systems, Man, and Cybernetics|issue=4|pages=364–378|doi=10.1109/TSMC.1971.4308320|s2cid=17606980}}</ref> describes the learning of a deep feedforward multilayer perceptron with eight layers, already much deeper than many later networks. In 2006, a publication by [[Geoffrey Hinton]] and Ruslan Salakhutdinov introduced another way of pre-training many-layered [[Feedforward neural network|feedforward neural networks]] (FNNs) one layer at a time, treating each layer in turn as an [[Unsupervised learning|unsupervised]] [[restricted Boltzmann machine]], then using [[Supervised learning|supervised]] [[backpropagation]] for fine-tuning.<ref>{{cite journal|last=Hinton|first=G. E.|year=2007|title=Learning multiple layers of representation|journal=Trends in Cognitive Sciences|volume=11|issue=10|pages=428–434|doi=10.1016/j.tics.2007.09.004|pmid=17921042|ref=harv}}</ref> Similar to shallow artificial neural networks, deep neural networks can model complex non-linear relationships.

Deep learning often uses [[Convolutional neural network|convolutional neural networks]] (CNNs), whose origins can be traced back to the [[Neocognitron]] introduced by [[Kunihiko Fukushima]] in 1980.<ref name="FUKU1980">{{cite journal|last1=Fukushima|first1=K.|year=1980|title=Neocognitron: A self-organizing neural network model for a mechanism of pattern recognition unaffected by shift in position|url=|journal=Biological Cybernetics|volume=36|issue=4|pages=193–202|doi=10.1007/bf00344251|pmid=7370364}}</ref> In 1989, [[Yann LeCun]] and colleagues applied [[backpropagation]] to such an architecture. In the early 2000s, in an industrial application, CNNs already processed an estimated 10% to 20% of all the checks written in the US.<ref name="lecun2016slides">[[Yann LeCun]] (2016). Slides on Deep Learning [https://indico.cern.ch/event/510372/ Online] {{webarchive|url=https://web.archive.org/web/20160423021403/https://indico.cern.ch/event/510372/|date=23 April 2016}}</ref> Since 2011, fast implementations of CNNs on GPUs have won many visual pattern recognition competitions.<ref name="schmidhuber2015" />

CNNs with 12 convolutional layers were used with [[reinforcement learning]] by Deepmind's "[[AlphaGo]] Lee", the program that beat a top [[Go (game)|Go]] champion in 2016.<ref name="Nature2017">{{cite journal|last1=Silver|first1=David|last2=Schrittwieser|first2=Julian|last3=Simonyan|first3=Karen|last4=Antonoglou|first4=Ioannis|last5=Huang|first5=Aja|author-link5=Aja Huang|last6=Guez|first6=Arthur|last7=Hubert|first7=Thomas|last8=Baker|first8=Lucas|last9=Lai|first9=Matthew|last10=Bolton|first10=Adrian|last11=Chen|first11=Yutian|date=19 October 2017|title=Mastering the game of Go without human knowledge|url=http://discovery.ucl.ac.uk/10045895/1/agz_unformatted_nature.pdf|journal=[[Nature (journal)|Nature]]|volume=550|issue=7676|pages=354–359|bibcode=2017Natur.550..354S|doi=10.1038/nature24270|issn=0028-0836|pmid=29052630|quote=AlphaGo Lee... 12 convolutional layers|last12=Lillicrap|author-link11=Chen Yutian|author-link1=David Silver (programmer)|author-link17=Demis Hassabis|first13=Hui|last17=Hassabis|first17=Demis|last16=Graepel|first16=Thore|last15=Driessche|first15=George van den|last14=Sifre|first14=Laurent|author-link13=Fan Hui|last13=Fan|first12=Timothy}}{{closed access}}</ref>

=== Deep recurrent neural networks ===
{{Main|Recurrent neural networks}}
Early on, deep learning was also applied to sequence learning with [[Recurrent neural network|recurrent neural networks]] (RNNs)<ref name="Recurrent neural networks"> [[Recurrent neural networks]], [[Hopfield nets]]:
* {{Harvnb|Russell|Norvig|2003|p=758}}
* {{Harvnb|Luger|Stubblefield|2004|pp=474–505}}
</ref> which are theoretically Turing complete<ref>{{cite journal|last1=Hyötyniemi|first1=Heikki|date=1996|title=Turing machines are recurrent neural networks|journal=Proceedings of STeP '96/Publications of the Finnish Artificial Intelligence Society|pages=13–24}}</ref> and can run arbitrary programs to process arbitrary sequences of inputs. The depth of an RNN is unlimited and depends on the length of its input sequence; thus, an RNN is an example of deep learning.<ref name="schmidhuber2015" /> RNNs can be trained by [[gradient descent]]<ref>P. J. Werbos. Generalization of backpropagation with application to a recurrent gas market model" ''Neural Networks'' 1, 1988.</ref><ref>A. J. Robinson and F. Fallside. The utility driven dynamic error propagation network. Technical Report CUED/F-INFENG/TR.1, Cambridge University Engineering Department, 1987.</ref><ref>R. J. Williams and D. Zipser. Gradient-based learning algorithms for recurrent networks and their computational complexity. In Back-propagation: Theory, Architectures and Applications. Hillsdale, NJ: Erlbaum, 1994.</ref> but suffer from the [[vanishing gradient problem]].<ref name="goodfellow2016" /><ref name="hochreiter1991">[[Sepp Hochreiter]] (1991), [http://people.idsia.ch/~juergen/SeppHochreiter1991ThesisAdvisorSchmidhuber.pdf Untersuchungen zu dynamischen neuronalen Netzen] {{webarchive|url=https://web.archive.org/web/20150306075401/http://people.idsia.ch/~juergen/SeppHochreiter1991ThesisAdvisorSchmidhuber.pdf|date=6 March 2015}}, Diploma thesis. Institut f. Informatik, Technische Univ. Munich. Advisor: J. Schmidhuber.</ref> In 1992, it was shown that unsupervised pre-training of a stack of [[Recurrent neural network|recurrent neural networks]] can speed up subsequent supervised learning of deep sequential problems.<ref name="SCHMID1992">{{cite journal|last1=Schmidhuber|first1=J.|year=1992|title=Learning complex, extended sequences using the principle of history compression|url=|journal=Neural Computation|volume=4|issue=2|pages=234–242|citeseerx=10.1.1.49.3934|doi=10.1162/neco.1992.4.2.234}}</ref>

Numerous researchers now use variants of a deep learning recurrent NN called the [[long short-term memory]] (LSTM) network published by Hochreiter & Schmidhuber in 1997.<ref name="lstm">[[Sepp Hochreiter|Hochreiter, Sepp]]; and [[Jürgen Schmidhuber|Schmidhuber, Jürgen]]; ''Long Short-Term Memory'', Neural Computation, 9(8):1735–1780, 1997</ref> LSTM is often trained by [[Connectionist temporal classification|Connectionist Temporal Classification]] (CTC).<ref name="graves2006">Alex Graves, Santiago Fernandez, Faustino Gomez, and [[Jürgen Schmidhuber]] (2006). Connectionist temporal classification: Labelling unsegmented sequence data with recurrent neural nets. Proceedings of ICML'06, pp. 369–376.</ref> At Google, Microsoft and Baidu this approach has revolutionized [[speech recognition]].<ref name="hannun2014">{{cite arXiv|eprint=1412.5567|class=cs.CL|first1=Awni|last1=Hannun|first2=Carl|last2=Case|title=Deep Speech: Scaling up end-to-end speech recognition|last3=Casper|first9=Shubho|year=2014|author11-link=Andrew Ng|first11=Andrew Y.|last11=Ng|first10=Adam|last10=Coates|first8=Sanjeev|last9=Sengupta|first3=Jared|last8=Satheesh|last7=Prenger|first6=Erich|last6=Elsen|first5=Greg|last5=Diamos|first4=Bryan|last4=Catanzaro|first7=Ryan}}</ref><ref name="sak2014">Hasim Sak and Andrew Senior and Francoise Beaufays (2014). Long Short-Term Memory recurrent neural network architectures for large scale acoustic modeling. Proceedings of Interspeech 2014.</ref><ref name="liwu2015">{{cite arXiv|eprint=1410.4281|class=cs.CL|first1=Xiangang|last1=Li|first2=Xihong|last2=Wu|title=Constructing Long Short-Term Memory based Deep Recurrent Neural Networks for Large Vocabulary Speech Recognition|year=2015}}</ref> For example, in 2015, Google's speech recognition experienced a dramatic performance jump of 49% through CTC-trained LSTM, which is now available through [[Google Voice]] to billions of smartphone users.<ref name="sak2015">Haşim Sak, Andrew Senior, Kanishka Rao, Françoise Beaufays and Johan Schalkwyk (September 2015): [http://googleresearch.blogspot.ch/2015/09/google-voice-search-faster-and-more.html Google voice search: faster and more accurate.] {{webarchive|url=https://web.archive.org/web/20160309191532/http://googleresearch.blogspot.ch/2015/09/google-voice-search-faster-and-more.html|date=9 March 2016}}</ref> Google also used LSTM to improve machine translation,<ref name="sutskever2014">{{cite arXiv|eprint=1409.3215|class=cs.CL|first1=Ilya|last1=Sutskever|first2=Oriol|last2=Vinyals|title=Sequence to Sequence Learning with Neural Networks|last3=Le|first3=Quoc V.|year=2014}}</ref> Language Modeling<ref name="vinyals2016">{{cite arXiv|eprint=1602.02410|class=cs.CL|first1=Rafal|last1=Jozefowicz|first2=Oriol|last2=Vinyals|title=Exploring the Limits of Language Modeling|last3=Schuster|first3=Mike|last4=Shazeer|first4=Noam|last5=Wu|first5=Yonghui|year=2016}}</ref> and Multilingual Language Processing.<ref name="gillick2015">{{cite arXiv|eprint=1512.00103|class=cs.CL|first1=Dan|last1=Gillick|first2=Cliff|last2=Brunk|title=Multilingual Language Processing From Bytes|last3=Vinyals|first3=Oriol|last4=Subramanya|first4=Amarnag|year=2015}}</ref> LSTM combined with CNNs also improved automatic image captioning<ref name="vinyals2015">{{cite arXiv|eprint=1411.4555|class=cs.CV|first1=Oriol|last1=Vinyals|first2=Alexander|last2=Toshev|title=Show and Tell: A Neural Image Caption Generator|last3=Bengio|first3=Samy|last4=Erhan|first4=Dumitru|year=2015}}</ref> and a plethora of other applications.

== Evaluating progress ==
{{Further|Progress in artificial intelligence|Competitions and prizes in artificial intelligence}}AI, like electricity or the steam engine, is a general purpose technology. There is no consensus on how to characterize which tasks AI tends to excel at.<ref>{{cite news|last1=Brynjolfsson|first1=Erik|last2=Mitchell|first2=Tom|date=22 December 2017|title=What can machine learning do? Workforce implications|language=en|pages=1530–1534|work=Science|url=http://science.sciencemag.org/content/358/6370/1530|accessdate=7 May 2018|bibcode=2017Sci...358.1530B|doi=10.1126/science.aap8062}}</ref> While projects such as [[AlphaZero]] have succeeded in generating their own knowledge from scratch, many other machine learning projects require large training datasets.<ref>{{cite news|last1=Sample|first1=Ian|date=18 October 2017|title='It's able to create knowledge itself': Google unveils AI that learns on its own|language=en|work=the Guardian|url=https://www.theguardian.com/science/2017/oct/18/its-able-to-create-knowledge-itself-google-unveils-ai-learns-all-on-its-own|accessdate=7 May 2018}}</ref><ref>{{cite news|date=5 July 2017|title=The AI revolution in science|language=en|work=Science {{!}} AAAS|url=http://www.sciencemag.org/news/2017/07/ai-revolution-science|accessdate=7 May 2018}}</ref> Researcher [[Andrew Ng]] has suggested, as a "highly imperfect rule of thumb", that "almost anything a typical human can do with less than one second of mental thought, we can probably now or in the near future automate using AI."<ref>{{cite news|date=2017|title=Will your job still exist in 10 years when the robots arrive?|language=en|work=[[South China Morning Post]]|url=http://www.scmp.com/tech/innovation/article/2098164/robots-are-coming-here-are-some-jobs-wont-exist-10-years|accessdate=7 May 2018}}</ref> [[Moravec's paradox]] suggests that AI lags humans at many tasks that the human brain has specifically evolved to perform well.<ref name="The Economist">{{cite news|date=2018|title=IKEA furniture and the limits of AI|language=en|work=The Economist|url=https://www.economist.com/news/leaders/21740735-humans-have-had-good-run-most-recent-breakthrough-robotics-it-clear|accessdate=24 April 2018}}</ref>

Games provide a well-publicized benchmark for assessing rates of progress. [[AlphaGo]] around 2016 brought the era of classical board-game benchmarks to a close. Games of imperfect knowledge provide new challenges to AI in [[game theory]].<ref>{{cite news|last1=Borowiec|first1=Tracey Lien, Steven|date=2016|title=AlphaGo beats human Go champ in milestone for artificial intelligence|work=latimes.com|url=https://www.latimes.com/world/asia/la-fg-korea-alphago-20160312-story.html|accessdate=7 May 2018}}</ref><ref>{{cite news|last1=Brown|first1=Noam|last2=Sandholm|first2=Tuomas|date=26 January 2018|title=Superhuman AI for heads-up no-limit poker: Libratus beats top professionals|language=en|pages=418–424|work=Science|url=http://science.sciencemag.org/content/359/6374/418|accessdate=7 May 2018|doi=10.1126/science.aao1733}}</ref> [[Esports|E-sports]] such as [[StarCraft]] continue to provide additional public benchmarks.<ref>{{cite journal|last1=Ontanon|first1=Santiago|last2=Synnaeve|first2=Gabriel|last3=Uriarte|first3=Alberto|last4=Richoux|first4=Florian|last5=Churchill|first5=David|last6=Preuss|first6=Mike|date=December 2013|title=A Survey of Real-Time Strategy Game AI Research and Competition in StarCraft|journal=IEEE Transactions on Computational Intelligence and AI in Games|volume=5|issue=4|pages=293–311|citeseerx=10.1.1.406.2524|doi=10.1109/TCIAIG.2013.2286295}}</ref><ref>{{cite news|date=2017|title=Facebook Quietly Enters StarCraft War for AI Bots, and Loses|work=WIRED|url=https://www.wired.com/story/facebook-quietly-enters-starcraft-war-for-ai-bots-and-loses/|accessdate=7 May 2018}}</ref> Many competitions and prizes, such as the [[ImageNet|Imagenet Challenge]], promote research in artificial intelligence. The most common areas of competition include general machine intelligence, conversational behavior, data-mining, [[Autonomous car|robotic cars]], and robot soccer as well as conventional games.<ref>{{Cite web|title=ILSVRC2017|url=http://image-net.org/challenges/LSVRC/2017/|access-date=2018-11-06|website=image-net.org|language=en}}</ref>

The "imitation game" (an interpretation of the 1950 [[Turing test]] that assesses whether a computer can imitate a human) is nowadays considered too exploitable to be a meaningful benchmark.<ref>{{cite journal|last1=Schoenick|first1=Carissa|last2=Clark|first2=Peter|last3=Tafjord|first3=Oyvind|last4=Turney|first4=Peter|last5=Etzioni|first5=Oren|date=23 August 2017|title=Moving beyond the Turing Test with the Allen AI Science Challenge|journal=Communications of the ACM|volume=60|issue=9|pages=60–64|arxiv=1604.04315|doi=10.1145/3122814}}</ref> A derivative of the Turing test is the Completely Automated Public Turing test to tell Computers and Humans Apart ([[CAPTCHA]]). As the name implies, this helps to determine that a user is an actual person and not a computer posing as a human. Unlike the standard Turing test, CAPTCHA is administered by a machine and targeted to a human as opposed to being administered by a human and targeted to a machine. A computer asks a user to complete a simple test then generates a grade for that test. Computers are unable to solve the problem, so correct solutions are deemed to be the result of a person taking the test. A common type of CAPTCHA is the test that requires the typing of distorted letters, numbers or symbols that appear in an image undecipherable by a computer.<ref>{{cite book|last1=O'Brien|first1=James|title=Management Information Systems|last2=Marakas|first2=George|publisher=McGraw-Hill/Irwin|year=2011|isbn=978-0-07-337681-3|edition=10th|ref=harv}}</ref>

Proposed "universal intelligence" tests aim to compare how well machines, humans, and even non-human animals perform on problem sets that are generic as possible. At an extreme, the test suite can contain every possible problem, weighted by [[Kolmogorov complexity]]; unfortunately, these problem sets tend to be dominated by impoverished pattern-matching exercises where a tuned AI can easily exceed human performance levels.<ref>{{cite journal|last=Hernandez-Orallo|first=Jose|year=2000|title=Beyond the Turing Test|journal=Journal of Logic, Language and Information|volume=9|issue=4|pages=447–466|doi=10.1023/A:1008367325700|ref=harv}}</ref><ref>{{cite journal|last1=Dowe|first1=D. L.|last2=Hajek|first2=A. R.|year=1997|title=A computational extension to the Turing Test|url=http://www.csse.monash.edu.au/publications/1997/tr-cs97-322-abs.html|url-status=dead|journal=Proceedings of the 4th Conference of the Australasian Cognitive Science Society|archiveurl=https://web.archive.org/web/20110628194905/http://www.csse.monash.edu.au/publications/1997/tr-cs97-322-abs.html|archivedate=28 June 2011|ref=harv|df=dmy-all}}</ref><ref>{{cite journal|last1=Hernandez-Orallo|first1=J.|last2=Dowe|first2=D. L.|year=2010|title=Measuring Universal Intelligence: Towards an Anytime Intelligence Test|journal=Artificial Intelligence|volume=174|issue=18|pages=1508–1539|citeseerx=10.1.1.295.9079|doi=10.1016/j.artint.2010.09.006|ref=harv}}</ref><ref>{{cite journal|last1=Hernández-Orallo|first1=José|last2=Dowe|first2=David L.|last3=Hernández-Lloreda|first3=M.Victoria|date=March 2014|title=Universal psychometrics: Measuring cognitive abilities in the machine kingdom|journal=Cognitive Systems Research|volume=27|pages=50–74|doi=10.1016/j.cogsys.2013.06.001|hdl-access=free|hdl=10251/50244}}</ref>

=== Hardware improvements ===
Since the 2010s, advances in both machine learning algorithms and computer hardware have led to more efficient methods for training deep neural networks that contain many layers of non-linear hidden units and a very large output layer.<ref>{{cite web|last1=Research|first1=AI|date=23 October 2015|title=Deep Neural Networks for Acoustic Modeling in Speech Recognition|url=http://airesearch.com/ai-research-papers/deep-neural-networks-for-acoustic-modeling-in-speech-recognition/|accessdate=23 October 2015|website=airesearch.com}}</ref> By 2019, graphic processing units ([[GPU|GPUs]]), often with AI-specific enhancements, had displaced CPUs as the dominant method of training large-scale commercial cloud AI.<ref>{{cite news|date=December 2019|title=GPUs Continue to Dominate the AI Accelerator Market for Now|language=en|work=InformationWeek|url=https://www.informationweek.com/big-data/ai-machine-learning/gpus-continue-to-dominate-the-ai-accelerator-market-for-now/a/d-id/1336475|accessdate=11 June 2020}}</ref> [[OpenAI]] estimated the hardware compute used in the largest deep learning projects from AlexNet (2012) to AlphaZero (2017), and found a 300,000-fold increase in the amount of compute required, with a doubling-time trendline of 3.4 months.<ref>{{cite news|last1=Ray|first1=Tiernan|date=2019|title=AI is changing the entire nature of compute|language=en|work=ZDNet|url=https://www.zdnet.com/article/ai-is-changing-the-entire-nature-of-compute/|accessdate=11 June 2020}}</ref><ref>{{cite web|date=16 May 2018|title=AI and Compute|url=https://openai.com/blog/ai-and-compute/|accessdate=11 June 2020|website=OpenAI|language=en}}</ref>

== Notes ==
{{notelist}}

== References ==
{{Reflist}}

=== Sources ===

* {{Cite book|last1=Russell|first1=Stuart J.|url=http://aima.cs.berkeley.edu/|title=Artificial Intelligence: A Modern Approach|last2=Norvig|first2=Peter|publisher=Prentice Hall|year=2003|isbn=978-0-13-790395-5|edition=2nd|location=Upper Saddle River, New Jersey|pages=|ref=harv|author-link=Stuart J. Russell|author2-link=Peter Norvig}}
* {{cite book|last1=Poole|first1=David|url=https://archive.org/details/computationalint00pool|title=Computational Intelligence: A Logical Approach|last2=Mackworth|first2=Alan|last3=Goebel|first3=Randy|publisher=Oxford University Press|year=1998|isbn=978-0-19-510270-3|location=New York|ref=harv|author-link=David Poole (researcher)|author2-link=Alan Mackworth|author3-link=Randy Goebel}}
* {{cite book|last1=Luger|first1=George|url=https://archive.org/details/artificialintell0000luge|title=Artificial Intelligence: Structures and Strategies for Complex Problem Solving|last2=Stubblefield|first2=William|publisher=Benjamin/Cummings|year=2004|isbn=978-0-8053-4780-7|edition=5th|ref=harv|author-link=George Luger|author2-link=William Stubblefield|url-access=registration}}
* {{cite book|last=Nilsson|first=Nils|url=https://archive.org/details/artificialintell0000nils|title=Artificial Intelligence: A New Synthesis|publisher=Morgan Kaufmann|year=1998|isbn=978-1-55860-467-4|ref=harv|author-link=Nils Nilsson (researcher)|url-access=registration}}

[[Category:Artificial intelligence applications]]
[[Category:Computer science]]